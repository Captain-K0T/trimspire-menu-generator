// –ö–æ–¥ –¥–ª—è —Ñ–∞–π–ª–∞ src/app/dashboard/page.tsx

'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import styles from './Dashboard.module.css';

// ... (–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã UserData, RecommendedMacros, Meal, DayPlan –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

interface UserData {
  currentWeight: number | null;
  goalWeight: number | null;
}

interface RecommendedMacros {
  calories: number;
  proteins: number;
  fats: number;
  carbs: number;
}

interface Meal {
  id: string;
  title: string;
  description: string;
  calories: number;
  proteins: number;
  fats: number;
  carbs: number;
  imageUrl: string | null;
}

interface DayPlan {
  day: string;
  meals: Meal[];
}


export default function DashboardPage() {
  const router = useRouter();
  
  const [weekPlan, setWeekPlan] = useState<DayPlan[] | null>(null);
  const [userData, setUserData] = useState<UserData | null>(null);
  const [macros, setMacros] = useState<RecommendedMacros | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [activeDayIndex, setActiveDayIndex] = useState(0);

  useEffect(() => {
    const fetchMenu = async () => {
      try {
        const response = await fetch('/api/menu/generate');
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é');
        }
        const data = await response.json();
        setWeekPlan(data.weekPlan);
        setUserData(data.userData);
        setMacros(data.recommendedMacros);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setIsLoading(false);
      }
    };
    fetchMenu();
  }, []);

  const handleLogout = async () => {
    await fetch('/api/auth/logout', { method: 'POST' });
    router.push('/login');
  };

  if (isLoading) {
    return <div className={styles.container}><p className={styles.loading}>–°–æ–∑–¥–∞—ë–º –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω...</p></div>;
  }

  if (error) {
    return <div className={styles.container}><p className={styles.error}>–û—à–∏–±–∫–∞: {error}</p></div>;
  }

  const activeDay = weekPlan ? weekPlan[activeDayIndex] : null;

  return (
    <div className={styles.container}>
      {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É-–∏–∫–æ–Ω–∫—É --- */}
      <button onClick={handleLogout} className={styles.logoutIcon}>
        üö™
      </button>
      {/* ------------------------------------------- */}

      <header className={styles.header}>
        <h1 className={styles.title}>–í–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è</h1>
        {userData && (
          <div className={styles.weightInfo}>
            <p>–í–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å: <strong>{userData.currentWeight || 'N/A'} –∫–≥</strong></p>
            <p>–í–∞—à –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Å: <strong>{userData.goalWeight || 'N/A'} –∫–≥</strong></p>
          </div>
        )}
        {macros && (
          <div className={styles.recommendedMacros}>
            <span>–ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º:</span>
            <p>üî• {macros.calories}</p>
            <p>ü•© {macros.proteins}</p>
            <p>ü•ë {macros.fats}</p>
            <p>üçû {macros.carbs}</p>
          </div>
        )}
      </header>
      
      <main className={styles.mainContent}>
        <aside className={styles.dayTabs}>
          {weekPlan?.map((dayPlan, index) => (
            <button
              key={dayPlan.day}
              className={`${styles.dayTab} ${index === activeDayIndex ? styles.activeTab : ''}`}
              onClick={() => setActiveDayIndex(index)}
            >
              {dayPlan.day}
            </button>
          ))}
        </aside>
        
        <section className={styles.mealsGrid}>
          {activeDay?.meals.map((meal) => (
            <div key={meal.id} className={styles.mealCard}>
              <img src={meal.imageUrl || '/images/placeholder.jpg'} alt={meal.title} className={styles.mealImage} />
              <div className={styles.mealContent}>
                <h3 className={styles.mealTitle}>{meal.title}</h3>
                <p className={styles.mealDescription}>
                  {meal.description.length > 100 ? `${meal.description.substring(0, 100)}...` : meal.description}
                </p>
                <div className={styles.mealMacros}>
                  <span>üî• {meal.calories}</span>
                  <span>ü•© {meal.proteins}</span>
                  <span>ü•ë {meal.fats}</span>
                  <span>üçû {meal.carbs}</span>
                </div>
              </div>
            </div>
          ))}
        </section>
      </main>

      {/* --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–¥–∞–ª–∏–ª–∏ —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É --- */}
    </div>
  );
}