// Этот блок описывает, как наше приложение будет подключаться к базе данных.
// Адрес подключения берется из файла .env, чтобы сохранить его в секрете.
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Этот блок указывает, что мы будем использовать Prisma Client для генерации
// кода для взаимодействия с базой данных.
generator client {
  provider = "prisma-client-js"
}

// === МОДЕЛИ ДАННЫХ ===

// Модель для пользователя
model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  quizAnswers   QuizAnswers?
  subscription  Subscription?
  generatedMenus WeeklyMenu[]
}

// Модель для хранения ответов на квиз
model QuizAnswers {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  // --- Single-choice вопросы (один ответ) ---
  mainGoal          String?
  bodyType          String?
  goal              String?
  dietExperience    String?
  eatingGuilt       String?
  bestShape         String?
  activityLevel     String?
  energyLevels      String?
  sleepHours        String?
  mealsPerDay       String?
  waterIntake       String?
  ageRange          String?
  stomachDiscomfort Boolean?
  mealPrepTime      String?
  
  // --- Multiple-choice вопросы (много ответов) ---
  mainStruggle      String[]
  followedDiets     String[]
  improveAreas      String[]
  likedVegetables   String[]
  meatPreferences   String[]
  sideDishes        String[]
  healthyFoods      String[]
  allergies         String[]
  dislikedFoods     String[]
  motivation        String[]
  lifeEvents        String[]
  upcomingEvent     String[]

  // --- Числовые вопросы ---
  currentWeight     Float?
  height            Float?
  goalWeight        Float?

  // --- Служебные поля ---
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// Модель для подписки пользователя
model Subscription {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  status    String
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// === МОДЕЛИ ДЛЯ РЕЦЕПТОВ И МЕНЮ ===

model Recipe {
  id            String   @id @default(cuid())
  title         String
  description   String
  mealType      String
  instructions  String
  imageUrl      String?
  calories      Int
  proteins      Int
  fats          Int
  carbs         Int
  cookingTime   Int

  ingredients RecipeIngredient[]
  tags        RecipeTag[]
  
  breakfastInMenus WeeklyMenuMeal[] @relation("BreakfastRecipes")
  lunchInMenus     WeeklyMenuMeal[] @relation("LunchRecipes")
  dinnerInMenus    WeeklyMenuMeal[] @relation("DinnerRecipes")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ingredient {
  id        String   @id @default(cuid())
  name      String   @unique
  category  String
  recipes   RecipeIngredient[]
}

model RecipeIngredient {
  recipe        Recipe     @relation(fields: [recipeId], references: [id])
  recipeId      String
  ingredient    Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId  String
  quantity      Float
  unit          String
  
  @@id([recipeId, ingredientId])
}

model Tag {
  id      String @id @default(cuid())
  name    String @unique
  recipes RecipeTag[]
}

model RecipeTag {
  recipe    Recipe @relation(fields: [recipeId], references: [id])
  recipeId  String
  tag       Tag    @relation(fields: [tagId], references: [id])
  tagId     String
  
  @@id([recipeId, tagId])
}


model WeeklyMenu {
  id      String   @id @default(cuid())
  user    User     @relation(fields: [userId], references: [id])
  userId  String
  weekStartDate DateTime
  meals         WeeklyMenuMeal[]
  createdAt DateTime @default(now())
}

model WeeklyMenuMeal {
  id           String     @id @default(cuid())
  weeklyMenu   WeeklyMenu @relation(fields: [weeklyMenuId], references: [id])
  weeklyMenuId String
  dayOfWeek    Int
  mealType     String
  
  breakfast    Recipe?    @relation("BreakfastRecipes", fields: [breakfastId], references: [id])
  breakfastId  String?
  lunch        Recipe?    @relation("LunchRecipes", fields: [lunchId], references: [id])
  lunchId      String?
  dinner       Recipe?    @relation("DinnerRecipes", fields: [dinnerId], references: [id])
  dinnerId     String?
}